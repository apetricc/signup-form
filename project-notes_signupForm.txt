made our boiler plate react app (in the current dir.) with: 
npx create-react-app signup-form

that gives us the basic files, App.js is rendered by index.js
App.test.js is the tester file for App.js 
--that's the standard naming convention for test files; 

if we look in App.test.js, we can see that it's already using some testing libraries by default
and has already imported them for us, courtesy of "npx create-react-app": 
import { render, screen } from '@testing-library/react';

and we can see in package.json: 
"dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    [removed for brevity]...
    ...
  },

--In fact, we can already run a testing command since there is a test in App.test.js: 
npm run test

which looks at our package.json file "scripts" property: 
"scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  }, ...

I think this should work, but I'm getting errors, maybe need to restart vsCode.
stack overflow told me to install specific version of jest typeahead and that fixed it:
npm i -D --exact jest-watch-typeahead@0.6.5

then I can run: 
npm run test

There was one test in there by default, and that test passes; 
________________________________________________________

@24.26 -- RTL philosophy
________________________________________________________

always test how the software is meant to be used, 
not how it's implemented; 

so we'll start writing some tests, starting with our assumptions of 
how the app should work for the users: 

--> we expect the user to be able to type (input) into the text fields.


@28.30ish  

What's in a test? We have 'test' keyword/method with 2 params: 
1. a string describing the test -- this is easy, describe the test; 
2. a callback function.
    the callback function will contain all the logic of our test/tests, and usually these 3 steps
    for testing react stuff:
    1. render a component, and we're passing in App from our App component...from our application.
        This will render only that component and its children into our 'virtual DOM' (no parents)


test('describe what the test is testing', () => {
    a callback function with these 3 steps: 
    1. render something to virtual DOM so we can test it
});

the actual test and some inline notes: 
test('renders learn react link', () => {
    //1. rendering the component we want to test
  render(<App />);

  //2. 'finding the elements'; Find a specific element within the component we're testing; 
  // we're using "screen.getByText()" with a regular expression inside --> /learn react/i
  const linkElement = screen.getByText(/learn react/i);

  //3. 'An assertion' PASS/FAIL; We're expecting this anchor tag to be in the document 
  expect(linkElement).toBeInTheDocument();
});

@33 min
we can run our tests again with "npm run test"
- now we'll get 2 tests passing b/c we added the other empty test; 
- it will only fail if an error gets thrown, so an empty test will always pass; 

@33.38  if we comment out the anchor tag our test will fail; (it's the "<a> </a>" tag)
note that the error we get sort of hints at you what element is missing, the anchor tag in this case; 

@34.54 - make our 'first test'
We wanted to test if users can type into the text input box, but we will start even easier
with just testing if the box is empty in the first place; 

@38  https://testing-library.com/docs/queries/about/
--> looking at RTL docs, we want to use one of the query calls to query a single element; 

@38.20 looking at table describing the different single element query options; 
__________
getBy() --> throws error if it doesn't find the element, if it finds 1 element it returns it,
if it finds multiple--error, cannot use async/await
__________
queryBy() -->  if we want to test for the lack of an element, we'd want to use 'queryBy()' instead of 
getBy() b/c queryBy() returns 'null' if it gets 0 matches. Otherwise it is the same as getBy()
__________
findBy() --> just like getBy(), except we can use it with elements that render asynchronously (that use async/await)

-----------------
@41min:
in the docs, it says "getBy..." 
so what does the "..." mean??
It means we can put different stuff there, which are listed in "Queries Accessible to Everyone" section;

These are all the things we can use with either
getBy, queryBy, or findBy

so it says "getByRole" but we can also "queryByRole" or "findByRole" for example; 
the list: 
1. getByRole            ||  queryByRole             ||  findByRole
2. getByLabelText       ||  queryByLabelText        ||  findByLabelText
3. getByPlaceholderText ||  queryByPlaceholderText  ||  findByPlaceholderText
4. getByText            ||  queryByText             ||  findByText
5. getByDisplayValue    ||  queryByDisplayValue     ||  findByDisplayValue
6. getByAltText         ||  queryByAltText          ||  findByAltText
7. getByTitle           ||  queryByTitle            ||  findByTitle
8. getByTestId          ||  queryByTestId           ||  findByTestId

so which one do we use??!  First of all, note that these are in order of priority, 
so we should use 'Role' first, then 'LabelText', and so on; 
It says 'TestId' is the 'last resort', but we are using that a lot in production for whatever reason; 

--------
back to our first test: 

test('inputs should be empty intially', () => {
  //render the component we want to test in our 'virtual DOM'
  render(<App />)
  // next step, find the input elements we want to test (query for them)--how do we do that ..?  see the RTL 'query' docs
  const emailInputElement = screen.getByRole("textbox");
});

This test will now fail b/c we don't have anything being rendered in our App.js that has a textbox,
∴  there's no way it can find an element with a role of "textbox"
If we look at the docs for "getBy()", we see that it throws error if it doesn't find the thing;
If an error gets thrown in a test block, that causes the test to fail.

Now we go for the assertion.  We expect the input element to be completely empty; 
expect(emailInputElement.value).toBe("");

@47.58  -- we're following TDD principles, so wrote our test first, 
now we want to write the code that will make our test pass;

for styling purposes only (nothing to do with testing), 
we are going to use 'Bootstrap' by adding this to our public/index.html: 
<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">

now we can add the elements in App.js to make our test pass;

@51.10 -- our tests now pass with the minimum amount of code needed to pass the tests we wrote.
I don't quite understand the relationship of our test to the stuff in our App.js yet;
is the test simply looking for any element that can hold text anywhere on the screen with this?: 
const emailInputElement = screen.getByRole("textbox");

after some digging I can see that we have a few things going on here; 
when we say `htmlFor="email"` that is a thing that automatcially knows to look for an email format string; 
We also have `<input type="email" ...` which is a similar sort of thing for email validation;
That means it knows it should be a text input, and there should be an "@" symbol etc.

@51.30-...
He mentions that if we wanted to make this a password input field, we couldn't just change the input type to:
 `input="password"`
and expect our test to pass, b/c 'password' input type doesn't count as a 'textbox' apparently; 
furthermore, 'password' (input type) has no implicit role;  
∴ we have to give any password field we want to test a label and an id like: 
<label for="password-field">Password</label>
<input id="password-field" name="password" type="password" />

clearly there's a lot to learn about html/JS and labels/input boxes 

Why our first test worked--
we had the 'label' --> `htmlFor="email"` 
we had the 'id' within the 'input' --> `<input ... id="email" .../>`

So to test the password field we need another div that has a
password input type & a label, & then we can get that input type by its label...?

@55
writing test for password field, utilize regex for this; 
then we run the usual: 
npm run test

of course it will fail b/c we haven't added a field for password yet, 
so we'll go over to our App.js file and copy the div we created already
as a boilerplate 
Then we update the "htmlFor" --> htmlFor="password"
and the input property values: 
type="password"
id="password"
name="password"

and then our tests will pass now that it can find somehting labeled as /password/i
@57.20
set up test and code for 'confirm password' input field; 

copy the 'password' div and update to 'Confirm Password', leave the input 'type' as password, 
but update the htmlFor, id, and name to 'confirm-password'

The test now fails with this error: 
"TestingLibraryElementError: Found multiple elements with the text of: /password/i"

So the regex is the issue I think;
ALso, when using 'getBy..' testing method, if it finds multiple elements that match, it throws an error, 
so this is the correct behavior;
We can update the first on to look for the string "Password" explicitly, and this would solve our issue;

@1.00.50 moving on to more complicated tests now that we've got our tests to confirm empty starting state;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
tuesday morning: 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
next we want to test that we can give input for the text input fields that we have now; 
see what we have with: 
npm run start             and see what we have at localhost:3000
We have an email field, a password field, and a confirm password field; 
∴ we need a new test block to test this completely different thing; 

  we want to simulate a browser interaction with our test,
  we can do this using @testing-library/user-event
see: 
https://testing-library.com/docs/ecosystem-user-event/#typeelement-text-options

We want to use 'type' from documentation: 
type(element, text, [options])
Writes text inside an <input> or a <textarea>.

We need to import to use: import userEvent from '@testing-library/user-event'

set up our test, but we will be implementing 2-way binding to our input element;
we'll be storing the input value inside our 'state' & then the value of the input is also 
going to be our state ? (not sure I understand this part)
update a React 'state' when receiving input from user basically, I think.

When we update a specific value, we also update the state. Easy. 
@1.06.24-- test failing with static state of value="" in the email input div
Then we remove that value="" 
@1.06.33 the first 'do it yourself' section--basically just write the same sort of tests 
for the other two fields: 'password' & 'confirm password'
and I think I got them  👍  
1.07.38 -- his explanation of how to add these tests; 
@1.11 -- start working on some more complicated tests now--error handling on the input fields; 
adding check for the email error message on invalid input using a matcher from Jest, see this page for other matchers: 
https://learntechsystems.com/assertions-in-react-testing-library/
they are: 
toBeDisabled, toBeEnabled, toBeEmpty, toBeEmptyDOMElement, toBeInTheDocument, toBeInvalid, toBeRequired, toBeValid, 
toBeVisible, toContainElement, toContainHTML, toHaveAttribute, toHaveClass, toHaveFocus, toHaveFormValues, toHaveStyle, 
toHaveTextContent, toHaveValue, toHaveDisplayValue, toBeChecked, toBePartiallyChecked, toHaveDescription

WE could also do a test to confirm that the invalid email error isn't present initially, and only after we click 'Submit' could it appear;

added test to confirm we don't have the error message initally; 
WE can't use 'getBy' here, b/c if we don't find what we try to 'getBy' initially, it will throw error;
we need to use "queryBy" for this sort of thing;  

@1.18.15  cleaned up our tests related to the bad email input error message, time to write implementation; 
We need to get the state of the user input and use it in our App;
Best way to do this is with "useState"

We added some properties for a useState object inside 'signupInput, setSignInput' & add:

 import { useState } from "react"

We are doing this to use 2 way binding, so that we can use whatever input goes into the divs in the DOM, 
and then whatever logic we apply also goes back to the DOM; 

Whatever the 'state' is inside our object, will be the value of the 'input' div, 
and anytime we update the 'input' we will also update the 'state'

First we'll do the 1 way binding which will be "whatever the input div gets, the `state` gets"
we add to our div --> value={signupInput.email}
-what if we did that (& forgot to do the 2-way binding using 'onChange')? 
our test for 'should be able to type in an email' will fail;
@1.21.44
our test will always fail at this point b/c we assigned a static value of "" to the "email" property of the 'useState'
∴ we're not going to be able to change the value, so to handle changing the value, we need to use an "onChange" handler; 
and on the proverbial 'change', we will call a function --> "handleChange"  (this is still within the email div element, not the method definition though ofc)
onChange={handleChange}
@1.22.18 defining handleChange function; 
We will spread the input fields inside the setSignInput{}  (AKA : "setSignInput object")
EXCEPT-- we want to set the email to whatever the input is from our event 'e'
But b/c we want to reuse this function for our other fields, AND we have given 
a unique "name" property to each of the input fields in our divs / DOM
we can reference that in the object, with '[e.target.name]'  (I am not sure why in brackets)
and the value we assign will come from 'e.target.value'  no brackets this time...for some reason.

@1.23.38 -- added 2 way binding so input into email field test is passing now; 
-> since are just referencing 'name' in our 'handleChange' function, we can basically copy paste the 
'value' part into our other two input fields, updating which property of "signupInput" we use to hold our state/input
remember that we declared it with 3 props--email, password, & confirmPassword which were all intialized as ""

            value={signupInput.password}
            onChange={handleChange}

We also have to update the 'name' property for the confirm-password div to 'confirmPassword' so it matches
the prop inside of 'signupInput'.  I tried changing signupInput to use 'confirm-password', but it won't accept 
a dash in the property name, only camelCase or snake_case
∴ it's easier to just update the 'name' property to 'confirmPassword' for that div section so they match;

Now we have 4/5 tests passing; 👍

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
@1.24.27  validate the email when we click the 'submit' button; 
add className to our button -- btn btn-primary

so we're updating our button element from: 
<button type="submit">Submit</button>  
to:
<button type="submit" className='btn btn-primary' onclick={handleClick}>Submit</button>


defining our 'handleClick' function-- this is where we will want to validate all our inputs...
ie. user has entered their stuff into the input fields, and they click the 'submit' button.

@1.25 defining 'handleClick'
He says the 1st thing we want to do is 'get the target & prevent the default behavior'... ?
If we had a link, the default behvior would be to follow the link--we can suppress this & other 
default behaviors using this 'preventDefault()' method invocation; (not sure why we want that here though) 
from w3 schools (https://www.w3schools.com/jsref/event_preventdefault.asp): 
Clicking on a "Submit" button, prevent it from submitting a form

@1.27ish:
now we want to get the email, & validate that it's a 'real' email (follows the standard format for an email anyway)
We'll use a regex to accomplish this maybe? 
google search: 'stackoverflow best way to validate an email in javascript'
find some interesting regex solutions; 
But this would be sort of reinventing the wheel... 
google search: 'validator javascript'  --> nope;
google search: 'validator npm' --> bingo

--note: it doesn't matter how we implement it, or if we use a library or regex; what matters is 
the experience for the user and if it works; 

the library is called 'validator' (https://www.npmjs.com/package/validator)
the docs say we can import like this in javascript---> var validator = require('validator');
but what we can do is this: 
npm install validator

we also have to add an import to our App.js file additionally... like this: 
import validator from 'validator';

Now that we have the validator library at our disposal, we can use it for some control flow--
test the input if it's a valid email inside our handleClick function
-->if it's not a valid email we want to throw an error.
What is the error?  --> we can create another piece of 'state' here for the error; 

we declared an array & set initial state to ""
const [error, setError] = userState("");

and added a thing before the button div that has a conditional so it only appears if there's an error message:
{error && <p>{error}</p>}

@1.30.37 -- then some red color for this error message to let the users know they have done something BAD:
{error && <p className="text-danger">{error}</p>}

currently getting a compile error on 'userState' not defined, so have to go back and review that input; 
I think it was supposed to be 'useState' like the other one that is 'useState' -->
I have a tendancy to type "user" instead of "use" ...
`useState` is the 'state hook' in react; 
`userState` is a typo that means nothing in react unless it's used like a variable name; 
@1.32.43
test still failing, but he is able to get the red warning to come up if he clicks submit on invalid email.
Mine doesn't show that red text, but some sort of popup appears from the email input box, maybe it's a built in react
thing that is a more recent version than the one he used in the video? I need to review up to this point to make sure
my code is matching his; 
-it seems like my code is matching, maybe a npm version, or react version thing?
--> NOPE-- I typo-ed "onClick" as `onclick` ... there's your problem!
added file "App1.js" which is currently his finished code for this project; 







- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
















  ∴   ↓   →   ←   ↔    ▲    ▼    ►    ◄   👍 





his repository: 
https://github.com/harblaith7/React-Testing-Library-Udemy-Course

